# .github/workflows/cd.yml
name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write       # <-- needed for upload-artifact v4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate deployment artifact
        run: |
          echo "IMAGE_TAG=${{ steps.meta.outputs.version }}" >> deployment.env
          echo "DEPLOYMENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment.env

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4   # <-- bumped to v4
        with:
          name: deployment-info
          path: deployment.env

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      actions: read        # <-- needed for download-artifact v4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download deployment artifact
        uses: actions/download-artifact@v4  # <-- bumped to v4
        with:
          name: deployment-info
          path: .                           # ensure deployment.env is in $GITHUB_WORKSPACE

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          source deployment.env
          kubectl set image deployment/bio-validation-api \
            api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n bio-validation-staging
          kubectl rollout status deployment/bio-validation-api \
            -n bio-validation-staging \
            --timeout=5m

      - name: Run smoke tests
        run: |
          sleep 30
          ENDPOINT=$(kubectl get service bio-validation-api-service \
            -n bio-validation-staging \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://${ENDPOINT}/health || exit 1
          echo "✅ Staging deployment successful"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      actions: read        # <-- needed for download-artifact v4
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download deployment artifact
        uses: actions/download-artifact@v4  # <-- bumped to v4
        with:
          name: deployment-info
          path: .

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Deploy to production
        run: |
          source deployment.env
          kubectl set image deployment/bio-validation-api \
            api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} \
            -n bio-validation-prod
          kubectl rollout status deployment/bio-validation-api \
            -n bio-validation-prod \
            --timeout=10m

      - name: Run production smoke tests
        run: |
          sleep 30
          ENDPOINT=$(kubectl get service bio-validation-api-service \
            -n bio-validation-prod \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://${ENDPOINT}/health || exit 1
          echo "✅ Production deployment successful"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
