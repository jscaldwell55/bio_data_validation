# docker-compose.yml
# Complete monitoring stack for Bio-Data Validation
# Location: project root (bio_data_validation/)

version: '3.8'

services:
  # =============================================================================
  # Bio-Data Validation API
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile
    container_name: bio-validation-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:///./bio_validation.db
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - NCBI_API_KEY=${NCBI_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # Prometheus - Metrics Collection
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    depends_on:
      - api
    restart: unless-stopped

  # =============================================================================
  # Grafana - Visualization (Optional but Recommended)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped

# =============================================================================
# Networks
# =============================================================================
networks:
  monitoring:
    driver: bridge

# =============================================================================
# Volumes (Persistent Storage)
# =============================================================================
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# USAGE
# =============================================================================
# 
# Start everything:
#   docker-compose up -d
# 
# Access services:
#   - API: http://localhost:8000
#   - API Docs: http://localhost:8000/docs
#   - Prometheus: http://localhost:9090
#   - Grafana: http://localhost:3000 (admin/admin)
#   - Metrics: http://localhost:8000/metrics
# 
# View logs:
#   docker-compose logs -f api
#   docker-compose logs -f prometheus
# 
# Stop everything:
#   docker-compose down
# 
# Stop and remove volumes:
#   docker-compose down -v
# 
# =============================================================================